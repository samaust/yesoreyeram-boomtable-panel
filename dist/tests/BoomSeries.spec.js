System.register(["./../app/boom/BoomUtils"], function (exports_1, context_1) {
    "use strict";
    var BoomUtils_1, dummy_series_1, dummy_series_2;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (BoomUtils_1_1) {
                BoomUtils_1 = BoomUtils_1_1;
            }
        ],
        execute: function () {
            dummy_series_1 = {
                stats: {
                    "avg": 9.077777777777778,
                    "count": 360,
                    "current": 6,
                    "delta": 1396,
                    "diff": 4,
                    "first": 2,
                    "logmin": 1,
                    "max": 24,
                    "min": 0,
                    "range": 24,
                    "timeStep": 60000,
                    "total": 3268,
                }
            };
            dummy_series_2 = {
                "alias": "COM # count",
                "aliasEscaped": "COM # count",
                "datapoints": [
                    [
                        108,
                        1575198840000
                    ],
                    [
                        86,
                        1575198900000
                    ],
                    [
                        93,
                        1575198960000
                    ],
                    [
                        48,
                        1575199020000
                    ],
                    [
                        null,
                        1575199080000
                    ],
                    [
                        null,
                        1575199140000
                    ],
                    [
                        null,
                        1575199200000
                    ],
                    [
                        null,
                        1575199260000
                    ]
                ],
                "id": "COM # count",
                "label": "COM # count",
                "stats": {
                    "avg": 41.875,
                    "count": 8,
                    "current": 0,
                    "delta": 93,
                    "diff": -108,
                    "first": 108,
                    "logmin": 48,
                    "max": 108,
                    "min": 0,
                    "range": 108,
                    "timeStep": 60000,
                    "total": 335,
                }
            };
            describe("Boom Series", function () {
                it("getSeriesValue", function () {
                    expect(BoomUtils_1.getSeriesValue({}, "total")).toBe(NaN);
                    expect(BoomUtils_1.getSeriesValue({}, "foo")).toBe(NaN);
                    expect(BoomUtils_1.getSeriesValue(dummy_series_1, "foo")).toBe(null);
                    expect(BoomUtils_1.getSeriesValue(dummy_series_1, "total")).toBe(3268);
                    expect(BoomUtils_1.getSeriesValue(dummy_series_1, "TOTAL")).toBe(3268);
                    expect(BoomUtils_1.getSeriesValue(dummy_series_1, "last_time")).toBe(null);
                    expect(BoomUtils_1.getSeriesValue(dummy_series_1, "LAST_TIME")).toBe(null);
                    expect(BoomUtils_1.getSeriesValue(dummy_series_2, "total")).toBe(dummy_series_2.stats.total);
                    expect(BoomUtils_1.getSeriesValue(dummy_series_2, "first_time_nonnull")).toBe(1575198840000);
                    expect(BoomUtils_1.getSeriesValue(dummy_series_2, "last_time_nonnull")).toBe(1575199020000);
                    expect(BoomUtils_1.getSeriesValue(dummy_series_2, "last_time_nonnull_minus_first_time_nonnull")).toBe(180000);
                    expect(BoomUtils_1.getSeriesValue(dummy_series_2, "last_time")).toBe(1575199260000);
                });
                it("getCurrentTimeStamp", function () {
                    expect(BoomUtils_1.getCurrentTimeStamp(dummy_series_2.datapoints)).toStrictEqual(new Date(1575199260000));
                });
                it("replaceDelimitedColumns", function () {
                    expect(BoomUtils_1.replaceDelimitedColumns("Hello _0_ is _1_", "foo.bar.baz", ".", "_")).toBe("Hello foo is bar");
                    expect(BoomUtils_1.replaceDelimitedColumns("Hello _0__1_", "foo.bar.baz", ".", "_")).toBe("Hello foobar");
                    expect(BoomUtils_1.replaceDelimitedColumns("Hello _0__1__1_", "foo.bar.baz", ".", "_")).toBe("Hello foobarbar");
                    expect(BoomUtils_1.replaceDelimitedColumns("Hello _0__1__3_", "foo.bar.baz", ".", "_")).toBe("Hello foobar_3_");
                    expect(BoomUtils_1.replaceDelimitedColumns("Hello _0__1__1_", "foo bar baz", " ", "_")).toBe("Hello foobarbar");
                    expect(BoomUtils_1.replaceDelimitedColumns("Hello #0##1##1#", "foo bar baz", " ", "#")).toBe("Hello foobarbar");
                });
                it("getRowName", function () {
                    expect(BoomUtils_1.getRowName("Hello _0_ is _1_", ".", "_", "foo.bar.baz", "", [])).toBe("Hello foo is bar");
                    expect(BoomUtils_1.getRowName("Hello _0_ is _1_ _series_ _series_", ".", "_", "foo.bar.baz", "", [])).toBe("Hello foo is bar foo.bar.baz foo.bar.baz");
                });
                it("getColName", function () {
                    expect(BoomUtils_1.getColName("Hello _0_ is _1_", ".", "_", "foo.bar.baz", "rowName", "", [])).toBe("Hello foo is bar");
                    expect(BoomUtils_1.getColName("foo.bar", ".", "_", "foo.bar", "foo.bar", "", [])).toBe("foo.bar");
                });
            });
            describe("Normalize Color", function () {
                it("Normalize Named Colors", function () {
                    expect(BoomUtils_1.normalizeColor("Green")).toBe("rgba(50, 172, 45, 0.97)");
                    expect(BoomUtils_1.normalizeColor("Orange")).toBe("rgba(237, 129, 40, 0.89)");
                    expect(BoomUtils_1.normalizeColor("Red")).toBe("rgba(245, 54, 54, 0.9)");
                    expect(BoomUtils_1.normalizeColor("Purple")).toBe("Purple");
                });
            });
            describe("Get Color", function () {
                it("Color Strings", function () {
                    expect(BoomUtils_1.getColor("Green", 0)).toBe(" style=\"color:rgba(50, 172, 45, 0.97)\" ");
                    expect(BoomUtils_1.getColor("Orange", 0)).toBe(" style=\"color:rgba(237, 129, 40, 0.89)\" ");
                    expect(BoomUtils_1.getColor("Red", 0)).toBe(" style=\"color:rgba(245, 54, 54, 0.9)\" ");
                    expect(BoomUtils_1.getColor("Purple", 0)).toBe(" style=\"color:Purple\" ");
                });
            });
            describe("Parse Math Tokens", function () {
                it("Sum", function () {
                    expect(BoomUtils_1.parseMathExpression("15+5", 0)).toBe(20);
                    expect(BoomUtils_1.parseMathExpression("0.2+2.3", 0)).toBe(3);
                });
                it("Substraction", function () {
                    expect(BoomUtils_1.parseMathExpression("15-5", 0)).toBe(10);
                    expect(BoomUtils_1.parseMathExpression("0.2-2.3", 0)).toBe(-2);
                });
                it("Multiplication", function () {
                    expect(BoomUtils_1.parseMathExpression("3*5", 0)).toBe(15);
                    expect(BoomUtils_1.parseMathExpression("0.2*2", 0)).toBe(0);
                    expect(BoomUtils_1.parseMathExpression("0.3*2", 0)).toBe(1);
                });
                it("Division", function () {
                    expect(BoomUtils_1.parseMathExpression("9/5", 0)).toBe(2);
                    expect(BoomUtils_1.parseMathExpression("0.2/2", 0)).toBe(0);
                    expect(BoomUtils_1.parseMathExpression("2.3/2", 0)).toBe(1);
                });
                it("Min", function () {
                    expect(BoomUtils_1.parseMathExpression("9min5", 0)).toBe(5);
                    expect(BoomUtils_1.parseMathExpression("5min9", 0)).toBe(5);
                    expect(BoomUtils_1.parseMathExpression("9min0.4", 0)).toBe(0);
                    expect(BoomUtils_1.parseMathExpression("5min0.9", 0)).toBe(1);
                });
            });
            describe("Get Actial name without tokens", function () {
                it("Row and colname", function () {
                    expect(BoomUtils_1.getActualNameWithoutTokens("hello")).toBe("hello");
                    expect(BoomUtils_1.getActualNameWithoutTokens("hello how are you!")).toBe("hello how are you!");
                    expect(BoomUtils_1.getActualNameWithoutTokens("hello _fa-circle_ how are you")).toBe("hello  how are you");
                });
            });
            describe("Threshold Validator", function () {
                it("BG Colors", function () {
                    expect(BoomUtils_1.getItemBasedOnThreshold([10, 20], ["green", "orange", "red"], 5, "black")).toBe("green");
                    expect(BoomUtils_1.getItemBasedOnThreshold([10, 20], ["green", "orange", "red"], 10, "black")).toBe("orange");
                    expect(BoomUtils_1.getItemBasedOnThreshold([10, 20], ["green", "orange", "red"], 15, "black")).toBe("orange");
                    expect(BoomUtils_1.getItemBasedOnThreshold([10, 20], ["green", "orange", "red", "blue"], 15, "black")).toBe("orange");
                    expect(BoomUtils_1.getItemBasedOnThreshold([10, 20], ["green", "orange", "red"], 20, "black")).toBe("red");
                    expect(BoomUtils_1.getItemBasedOnThreshold([10, 20], ["green", "orange", "red"], 25, "black")).toBe("red");
                    expect(BoomUtils_1.getItemBasedOnThreshold([10, 20], ["green", "orange", "red"], 20, "black")).toBe("red");
                    expect(BoomUtils_1.getItemBasedOnThreshold([10, 20], ["green", "orange"], 25, "black")).toBe("black");
                });
            });
            describe("Mertic Name from prometheus / influxdb Alias", function () {
                it("Prometheus Format", function () {
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias("container_cpu_load_average_10s")).toBe("container_cpu_load_average_10s");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias("container_cpu_load_average_10s ")).toBe("container_cpu_load_average_10s");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias("container_cpu_load_average_10s {}")).toBe("container_cpu_load_average_10s");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias(" container_cpu_load_average_10s {}")).toBe("container_cpu_load_average_10s");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias("container_cpu_load_average_10s{agentpool=\"agentpool1\"}")).toBe("container_cpu_load_average_10s");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias("container_cpu_load_average_10s {agentpool=\"agentpool1\"}")).toBe("container_cpu_load_average_10s");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias(" container_cpu_load_average_10s { agentpool = \"agentpool1\" } ")).toBe("container_cpu_load_average_10s");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias(" container_cpu_load_average_10s { image = \"abc:cba12:hello\" } ")).toBe("container_cpu_load_average_10s");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias("container_memory_usage_bytes{beta_kubernetes_io_arch=\"amd64\",beta_kubernetes_io_instance_type=\"Standard_D2_v2\"}")).toBe("container_memory_usage_bytes");
                });
                it("InfluxDB Format", function () {
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias("CPU.CPU TIme")).toBe("CPU.CPU TIme");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias("CPU.CPU TIme ")).toBe("CPU.CPU TIme");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias("CPU.CPU TIme {} ")).toBe("CPU.CPU TIme");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias("CPU.CPU TIme {environment: 279, instance: _Total}")).toBe("CPU.CPU TIme");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias(" CPU.CPU TIme { environment: 279, instance: _Total}")).toBe("CPU.CPU TIme");
                    expect(BoomUtils_1.getMetricNameFromTaggedAlias(" CPU.CPU TIme { environment: 279, equation: `_Tota=l`}")).toBe("CPU.CPU TIme");
                });
            });
            describe("Value needs to hidden", function () {
                it("Default Values", function () {
                    expect(BoomUtils_1.doesValueNeedsToHide(10, undefined)).toBe(false);
                    expect(BoomUtils_1.doesValueNeedsToHide(0, { value_below: "5" })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(-2, { value_below: "-1" })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(2, { value_below: "10" })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(10, { value_below: "5" })).toBe(false);
                    expect(BoomUtils_1.doesValueNeedsToHide(2, { value_below: "-1" })).toBe(false);
                    expect(BoomUtils_1.doesValueNeedsToHide(15, { value_above: "10" })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(15, { value_above: "0" })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(10, { value_above: "15" })).toBe(false);
                    expect(BoomUtils_1.doesValueNeedsToHide(0, { value_above: "15" })).toBe(false);
                    expect(BoomUtils_1.doesValueNeedsToHide(0, { value_below: "5", value_above: "-5" })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(10, { value_below: "15", value_above: "30" })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(10, { value_below: "5", value_above: "5" })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(10, { value_below: "15", value_above: "5" })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(10, { value_below: "015", value_above: "05" })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(0, { value_below: "5", value_above: "2" })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(0, { value_below: "2", value_above: "5" })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(10, { value_below: " 015 ", value_above: " 05 " })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(10, { value_below: " 5 ", value_above: "-5 " })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(10, { value_below: "15", value_above: "5 " })).toBe(true);
                    expect(BoomUtils_1.doesValueNeedsToHide(10, { value_below: "5", value_above: "30" })).toBe(false);
                    expect(BoomUtils_1.doesValueNeedsToHide(10, { value_below: " 5 ", value_above: " 30 " })).toBe(false);
                    expect(BoomUtils_1.doesValueNeedsToHide(0, { value_below: "-2", value_above: "5" })).toBe(false);
                });
            });
        }
    };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm9vbVNlcmllcy5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3RzL0Jvb21TZXJpZXMuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztZQUVNLGNBQWMsR0FBRztnQkFDbkIsS0FBSyxFQUFFO29CQUNILEtBQUssRUFBRSxpQkFBaUI7b0JBQ3hCLE9BQU8sRUFBRSxHQUFHO29CQUNaLFNBQVMsRUFBRSxDQUFDO29CQUNaLE9BQU8sRUFBRSxJQUFJO29CQUNiLE1BQU0sRUFBRSxDQUFDO29CQUNULE9BQU8sRUFBRSxDQUFDO29CQUNWLFFBQVEsRUFBRSxDQUFDO29CQUNYLEtBQUssRUFBRSxFQUFFO29CQUNULEtBQUssRUFBRSxDQUFDO29CQUNSLE9BQU8sRUFBRSxFQUFFO29CQUNYLFVBQVUsRUFBRSxLQUFLO29CQUNqQixPQUFPLEVBQUUsSUFBSTtpQkFDaEI7YUFDSixDQUFDO1lBQ0ksY0FBYyxHQUFHO2dCQUNuQixPQUFPLEVBQUUsYUFBYTtnQkFDdEIsY0FBYyxFQUFFLGFBQWE7Z0JBQzdCLFlBQVksRUFBRTtvQkFDVjt3QkFDSSxHQUFHO3dCQUNILGFBQWE7cUJBQ2hCO29CQUNEO3dCQUNJLEVBQUU7d0JBQ0YsYUFBYTtxQkFDaEI7b0JBQ0Q7d0JBQ0ksRUFBRTt3QkFDRixhQUFhO3FCQUNoQjtvQkFDRDt3QkFDSSxFQUFFO3dCQUNGLGFBQWE7cUJBQ2hCO29CQUNEO3dCQUNJLElBQUk7d0JBQ0osYUFBYTtxQkFDaEI7b0JBQ0Q7d0JBQ0ksSUFBSTt3QkFDSixhQUFhO3FCQUNoQjtvQkFDRDt3QkFDSSxJQUFJO3dCQUNKLGFBQWE7cUJBQ2hCO29CQUNEO3dCQUNJLElBQUk7d0JBQ0osYUFBYTtxQkFDaEI7aUJBQ0o7Z0JBQ0QsSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixPQUFPLEVBQUU7b0JBQ0wsS0FBSyxFQUFFLE1BQU07b0JBQ2IsT0FBTyxF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QUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5vcm1hbGl6ZUNvbG9yLCBwYXJzZU1hdGhFeHByZXNzaW9uLCBnZXRDb2xvciwgZ2V0QWN0dWFsTmFtZVdpdGhvdXRUb2tlbnMsIGdldEl0ZW1CYXNlZE9uVGhyZXNob2xkLCBnZXRNZXRyaWNOYW1lRnJvbVRhZ2dlZEFsaWFzLCBnZXRTZXJpZXNWYWx1ZSwgZ2V0Q3VycmVudFRpbWVTdGFtcCwgcmVwbGFjZURlbGltaXRlZENvbHVtbnMsIGdldFJvd05hbWUsIGdldENvbE5hbWUsIGRvZXNWYWx1ZU5lZWRzVG9IaWRlIH0gZnJvbSBcIi4vLi4vYXBwL2Jvb20vQm9vbVV0aWxzXCI7XHJcblxyXG5jb25zdCBkdW1teV9zZXJpZXNfMSA9IHtcclxuICAgIHN0YXRzOiB7XHJcbiAgICAgICAgXCJhdmdcIjogOS4wNzc3Nzc3Nzc3Nzc3NzgsXHJcbiAgICAgICAgXCJjb3VudFwiOiAzNjAsXHJcbiAgICAgICAgXCJjdXJyZW50XCI6IDYsXHJcbiAgICAgICAgXCJkZWx0YVwiOiAxMzk2LFxyXG4gICAgICAgIFwiZGlmZlwiOiA0LFxyXG4gICAgICAgIFwiZmlyc3RcIjogMixcclxuICAgICAgICBcImxvZ21pblwiOiAxLFxyXG4gICAgICAgIFwibWF4XCI6IDI0LFxyXG4gICAgICAgIFwibWluXCI6IDAsXHJcbiAgICAgICAgXCJyYW5nZVwiOiAyNCxcclxuICAgICAgICBcInRpbWVTdGVwXCI6IDYwMDAwLFxyXG4gICAgICAgIFwidG90YWxcIjogMzI2OCxcclxuICAgIH1cclxufTtcclxuY29uc3QgZHVtbXlfc2VyaWVzXzIgPSB7XHJcbiAgICBcImFsaWFzXCI6IFwiQ09NICMgY291bnRcIixcclxuICAgIFwiYWxpYXNFc2NhcGVkXCI6IFwiQ09NICMgY291bnRcIixcclxuICAgIFwiZGF0YXBvaW50c1wiOiBbXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICAxMDgsXHJcbiAgICAgICAgICAgIDE1NzUxOTg4NDAwMDBcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgODYsXHJcbiAgICAgICAgICAgIDE1NzUxOTg5MDAwMDBcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgOTMsXHJcbiAgICAgICAgICAgIDE1NzUxOTg5NjAwMDBcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgNDgsXHJcbiAgICAgICAgICAgIDE1NzUxOTkwMjAwMDBcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgMTU3NTE5OTA4MDAwMFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICAxNTc1MTk5MTQwMDAwXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgIDE1NzUxOTkyMDAwMDBcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgMTU3NTE5OTI2MDAwMFxyXG4gICAgICAgIF1cclxuICAgIF0sXHJcbiAgICBcImlkXCI6IFwiQ09NICMgY291bnRcIixcclxuICAgIFwibGFiZWxcIjogXCJDT00gIyBjb3VudFwiLFxyXG4gICAgXCJzdGF0c1wiOiB7XHJcbiAgICAgICAgXCJhdmdcIjogNDEuODc1LFxyXG4gICAgICAgIFwiY291bnRcIjogOCxcclxuICAgICAgICBcImN1cnJlbnRcIjogMCxcclxuICAgICAgICBcImRlbHRhXCI6IDkzLFxyXG4gICAgICAgIFwiZGlmZlwiOiAtMTA4LFxyXG4gICAgICAgIFwiZmlyc3RcIjogMTA4LFxyXG4gICAgICAgIFwibG9nbWluXCI6IDQ4LFxyXG4gICAgICAgIFwibWF4XCI6IDEwOCxcclxuICAgICAgICBcIm1pblwiOiAwLFxyXG4gICAgICAgIFwicmFuZ2VcIjogMTA4LFxyXG4gICAgICAgIFwidGltZVN0ZXBcIjogNjAwMDAsXHJcbiAgICAgICAgXCJ0b3RhbFwiOiAzMzUsXHJcbiAgICB9XHJcbn07XHJcbmRlc2NyaWJlKFwiQm9vbSBTZXJpZXNcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJnZXRTZXJpZXNWYWx1ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KGdldFNlcmllc1ZhbHVlKHt9LCBcInRvdGFsXCIpKS50b0JlKE5hTik7XHJcbiAgICAgICAgZXhwZWN0KGdldFNlcmllc1ZhbHVlKHt9LCBcImZvb1wiKSkudG9CZShOYU4pO1xyXG4gICAgICAgIGV4cGVjdChnZXRTZXJpZXNWYWx1ZShkdW1teV9zZXJpZXNfMSwgXCJmb29cIikpLnRvQmUobnVsbCk7XHJcbiAgICAgICAgZXhwZWN0KGdldFNlcmllc1ZhbHVlKGR1bW15X3Nlcmllc18xLCBcInRvdGFsXCIpKS50b0JlKDMyNjgpO1xyXG4gICAgICAgIGV4cGVjdChnZXRTZXJpZXNWYWx1ZShkdW1teV9zZXJpZXNfMSwgXCJUT1RBTFwiKSkudG9CZSgzMjY4KTtcclxuICAgICAgICBleHBlY3QoZ2V0U2VyaWVzVmFsdWUoZHVtbXlfc2VyaWVzXzEsIFwibGFzdF90aW1lXCIpKS50b0JlKG51bGwpO1xyXG4gICAgICAgIGV4cGVjdChnZXRTZXJpZXNWYWx1ZShkdW1teV9zZXJpZXNfMSwgXCJMQVNUX1RJTUVcIikpLnRvQmUobnVsbCk7XHJcbiAgICAgICAgZXhwZWN0KGdldFNlcmllc1ZhbHVlKGR1bW15X3Nlcmllc18yLCBcInRvdGFsXCIpKS50b0JlKGR1bW15X3Nlcmllc18yLnN0YXRzLnRvdGFsKTtcclxuICAgICAgICBleHBlY3QoZ2V0U2VyaWVzVmFsdWUoZHVtbXlfc2VyaWVzXzIsIFwiZmlyc3RfdGltZV9ub25udWxsXCIpKS50b0JlKDE1NzUxOTg4NDAwMDApO1xyXG4gICAgICAgIGV4cGVjdChnZXRTZXJpZXNWYWx1ZShkdW1teV9zZXJpZXNfMiwgXCJsYXN0X3RpbWVfbm9ubnVsbFwiKSkudG9CZSgxNTc1MTk5MDIwMDAwKTtcclxuICAgICAgICBleHBlY3QoZ2V0U2VyaWVzVmFsdWUoZHVtbXlfc2VyaWVzXzIsIFwibGFzdF90aW1lX25vbm51bGxfbWludXNfZmlyc3RfdGltZV9ub25udWxsXCIpKS50b0JlKDE4MDAwMCk7XHJcbiAgICAgICAgZXhwZWN0KGdldFNlcmllc1ZhbHVlKGR1bW15X3Nlcmllc18yLCBcImxhc3RfdGltZVwiKSkudG9CZSgxNTc1MTk5MjYwMDAwKTtcclxuICAgIH0pO1xyXG4gICAgaXQoXCJnZXRDdXJyZW50VGltZVN0YW1wXCIsICgpID0+IHtcclxuICAgICAgICBleHBlY3QoZ2V0Q3VycmVudFRpbWVTdGFtcChkdW1teV9zZXJpZXNfMi5kYXRhcG9pbnRzKSkudG9TdHJpY3RFcXVhbChuZXcgRGF0ZSgxNTc1MTk5MjYwMDAwKSk7XHJcbiAgICB9KTtcclxuICAgIGl0KFwicmVwbGFjZURlbGltaXRlZENvbHVtbnNcIiwgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChyZXBsYWNlRGVsaW1pdGVkQ29sdW1ucyhcIkhlbGxvIF8wXyBpcyBfMV9cIiwgXCJmb28uYmFyLmJhelwiLCBcIi5cIiwgXCJfXCIpKS50b0JlKFwiSGVsbG8gZm9vIGlzIGJhclwiKTtcclxuICAgICAgICBleHBlY3QocmVwbGFjZURlbGltaXRlZENvbHVtbnMoXCJIZWxsbyBfMF9fMV9cIiwgXCJmb28uYmFyLmJhelwiLCBcIi5cIiwgXCJfXCIpKS50b0JlKFwiSGVsbG8gZm9vYmFyXCIpO1xyXG4gICAgICAgIGV4cGVjdChyZXBsYWNlRGVsaW1pdGVkQ29sdW1ucyhcIkhlbGxvIF8wX18xX18xX1wiLCBcImZvby5iYXIuYmF6XCIsIFwiLlwiLCBcIl9cIikpLnRvQmUoXCJIZWxsbyBmb29iYXJiYXJcIik7XHJcbiAgICAgICAgZXhwZWN0KHJlcGxhY2VEZWxpbWl0ZWRDb2x1bW5zKFwiSGVsbG8gXzBfXzFfXzNfXCIsIFwiZm9vLmJhci5iYXpcIiwgXCIuXCIsIFwiX1wiKSkudG9CZShcIkhlbGxvIGZvb2Jhcl8zX1wiKTtcclxuICAgICAgICBleHBlY3QocmVwbGFjZURlbGltaXRlZENvbHVtbnMoXCJIZWxsbyBfMF9fMV9fMV9cIiwgXCJmb28gYmFyIGJhelwiLCBcIiBcIiwgXCJfXCIpKS50b0JlKFwiSGVsbG8gZm9vYmFyYmFyXCIpO1xyXG4gICAgICAgIGV4cGVjdChyZXBsYWNlRGVsaW1pdGVkQ29sdW1ucyhcIkhlbGxvICMwIyMxIyMxI1wiLCBcImZvbyBiYXIgYmF6XCIsIFwiIFwiLCBcIiNcIikpLnRvQmUoXCJIZWxsbyBmb29iYXJiYXJcIik7XHJcbiAgICB9KTtcclxuICAgIGl0KFwiZ2V0Um93TmFtZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KGdldFJvd05hbWUoXCJIZWxsbyBfMF8gaXMgXzFfXCIsIFwiLlwiLCBcIl9cIiwgXCJmb28uYmFyLmJhelwiLCBcIlwiLCBbXSkpLnRvQmUoXCJIZWxsbyBmb28gaXMgYmFyXCIpO1xyXG4gICAgICAgIGV4cGVjdChnZXRSb3dOYW1lKFwiSGVsbG8gXzBfIGlzIF8xXyBfc2VyaWVzXyBfc2VyaWVzX1wiLCBcIi5cIiwgXCJfXCIsIFwiZm9vLmJhci5iYXpcIiwgXCJcIiwgW10pKS50b0JlKFwiSGVsbG8gZm9vIGlzIGJhciBmb28uYmFyLmJheiBmb28uYmFyLmJhelwiKTtcclxuICAgIH0pO1xyXG4gICAgaXQoXCJnZXRDb2xOYW1lXCIsICgpID0+IHtcclxuICAgICAgICBleHBlY3QoZ2V0Q29sTmFtZShcIkhlbGxvIF8wXyBpcyBfMV9cIiwgXCIuXCIsIFwiX1wiLCBcImZvby5iYXIuYmF6XCIsIFwicm93TmFtZVwiLCBcIlwiLCBbXSkpLnRvQmUoXCJIZWxsbyBmb28gaXMgYmFyXCIpO1xyXG4gICAgICAgIGV4cGVjdChnZXRDb2xOYW1lKFwiZm9vLmJhclwiLCBcIi5cIiwgXCJfXCIsIFwiZm9vLmJhclwiLCBcImZvby5iYXJcIiwgXCJcIiwgW10pKS50b0JlKFwiZm9vLmJhclwiKTtcclxuICAgIH0pO1xyXG59KTtcclxuZGVzY3JpYmUoXCJOb3JtYWxpemUgQ29sb3JcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJOb3JtYWxpemUgTmFtZWQgQ29sb3JzXCIsICgpID0+IHtcclxuICAgICAgICBleHBlY3Qobm9ybWFsaXplQ29sb3IoXCJHcmVlblwiKSkudG9CZShcInJnYmEoNTAsIDE3MiwgNDUsIDAuOTcpXCIpO1xyXG4gICAgICAgIGV4cGVjdChub3JtYWxpemVDb2xvcihcIk9yYW5nZVwiKSkudG9CZShcInJnYmEoMjM3LCAxMjksIDQwLCAwLjg5KVwiKTtcclxuICAgICAgICBleHBlY3Qobm9ybWFsaXplQ29sb3IoXCJSZWRcIikpLnRvQmUoXCJyZ2JhKDI0NSwgNTQsIDU0LCAwLjkpXCIpO1xyXG4gICAgICAgIGV4cGVjdChub3JtYWxpemVDb2xvcihcIlB1cnBsZVwiKSkudG9CZShcIlB1cnBsZVwiKTtcclxuICAgIH0pO1xyXG59KTtcclxuZGVzY3JpYmUoXCJHZXQgQ29sb3JcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJDb2xvciBTdHJpbmdzXCIsICgpID0+IHtcclxuICAgICAgICBleHBlY3QoZ2V0Q29sb3IoXCJHcmVlblwiLCAwKSkudG9CZShgIHN0eWxlPVwiY29sb3I6cmdiYSg1MCwgMTcyLCA0NSwgMC45NylcIiBgKTtcclxuICAgICAgICBleHBlY3QoZ2V0Q29sb3IoXCJPcmFuZ2VcIiwgMCkpLnRvQmUoYCBzdHlsZT1cImNvbG9yOnJnYmEoMjM3LCAxMjksIDQwLCAwLjg5KVwiIGApO1xyXG4gICAgICAgIGV4cGVjdChnZXRDb2xvcihcIlJlZFwiLCAwKSkudG9CZShgIHN0eWxlPVwiY29sb3I6cmdiYSgyNDUsIDU0LCA1NCwgMC45KVwiIGApO1xyXG4gICAgICAgIGV4cGVjdChnZXRDb2xvcihcIlB1cnBsZVwiLCAwKSkudG9CZShgIHN0eWxlPVwiY29sb3I6UHVycGxlXCIgYCk7XHJcbiAgICB9KTtcclxufSk7XHJcbmRlc2NyaWJlKFwiUGFyc2UgTWF0aCBUb2tlbnNcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJTdW1cIiwgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChwYXJzZU1hdGhFeHByZXNzaW9uKFwiMTUrNVwiLCAwKSkudG9CZSgyMCk7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlTWF0aEV4cHJlc3Npb24oXCIwLjIrMi4zXCIsIDApKS50b0JlKDMpO1xyXG4gICAgfSk7XHJcbiAgICBpdChcIlN1YnN0cmFjdGlvblwiLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlTWF0aEV4cHJlc3Npb24oXCIxNS01XCIsIDApKS50b0JlKDEwKTtcclxuICAgICAgICBleHBlY3QocGFyc2VNYXRoRXhwcmVzc2lvbihcIjAuMi0yLjNcIiwgMCkpLnRvQmUoLTIpO1xyXG4gICAgfSk7XHJcbiAgICBpdChcIk11bHRpcGxpY2F0aW9uXCIsICgpID0+IHtcclxuICAgICAgICBleHBlY3QocGFyc2VNYXRoRXhwcmVzc2lvbihcIjMqNVwiLCAwKSkudG9CZSgxNSk7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlTWF0aEV4cHJlc3Npb24oXCIwLjIqMlwiLCAwKSkudG9CZSgwKTtcclxuICAgICAgICBleHBlY3QocGFyc2VNYXRoRXhwcmVzc2lvbihcIjAuMyoyXCIsIDApKS50b0JlKDEpO1xyXG4gICAgfSk7XHJcbiAgICBpdChcIkRpdmlzaW9uXCIsICgpID0+IHtcclxuICAgICAgICBleHBlY3QocGFyc2VNYXRoRXhwcmVzc2lvbihcIjkvNVwiLCAwKSkudG9CZSgyKTtcclxuICAgICAgICBleHBlY3QocGFyc2VNYXRoRXhwcmVzc2lvbihcIjAuMi8yXCIsIDApKS50b0JlKDApO1xyXG4gICAgICAgIGV4cGVjdChwYXJzZU1hdGhFeHByZXNzaW9uKFwiMi4zLzJcIiwgMCkpLnRvQmUoMSk7XHJcbiAgICB9KTtcclxuICAgIGl0KFwiTWluXCIsICgpID0+IHtcclxuICAgICAgICBleHBlY3QocGFyc2VNYXRoRXhwcmVzc2lvbihcIjltaW41XCIsIDApKS50b0JlKDUpO1xyXG4gICAgICAgIGV4cGVjdChwYXJzZU1hdGhFeHByZXNzaW9uKFwiNW1pbjlcIiwgMCkpLnRvQmUoNSk7XHJcbiAgICAgICAgZXhwZWN0KHBhcnNlTWF0aEV4cHJlc3Npb24oXCI5bWluMC40XCIsIDApKS50b0JlKDApO1xyXG4gICAgICAgIGV4cGVjdChwYXJzZU1hdGhFeHByZXNzaW9uKFwiNW1pbjAuOVwiLCAwKSkudG9CZSgxKTtcclxuICAgIH0pO1xyXG59KTtcclxuZGVzY3JpYmUoXCJHZXQgQWN0aWFsIG5hbWUgd2l0aG91dCB0b2tlbnNcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJSb3cgYW5kIGNvbG5hbWVcIiwgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChnZXRBY3R1YWxOYW1lV2l0aG91dFRva2VucyhcImhlbGxvXCIpKS50b0JlKFwiaGVsbG9cIik7XHJcbiAgICAgICAgZXhwZWN0KGdldEFjdHVhbE5hbWVXaXRob3V0VG9rZW5zKFwiaGVsbG8gaG93IGFyZSB5b3UhXCIpKS50b0JlKFwiaGVsbG8gaG93IGFyZSB5b3UhXCIpO1xyXG4gICAgICAgIGV4cGVjdChnZXRBY3R1YWxOYW1lV2l0aG91dFRva2VucyhcImhlbGxvIF9mYS1jaXJjbGVfIGhvdyBhcmUgeW91XCIpKS50b0JlKFwiaGVsbG8gIGhvdyBhcmUgeW91XCIpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5kZXNjcmliZShcIlRocmVzaG9sZCBWYWxpZGF0b3JcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJCRyBDb2xvcnNcIiwgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChnZXRJdGVtQmFzZWRPblRocmVzaG9sZChbMTAsIDIwXSwgW1wiZ3JlZW5cIiwgXCJvcmFuZ2VcIiwgXCJyZWRcIl0sIDUsIFwiYmxhY2tcIikpLnRvQmUoXCJncmVlblwiKTtcclxuICAgICAgICBleHBlY3QoZ2V0SXRlbUJhc2VkT25UaHJlc2hvbGQoWzEwLCAyMF0sIFtcImdyZWVuXCIsIFwib3JhbmdlXCIsIFwicmVkXCJdLCAxMCwgXCJibGFja1wiKSkudG9CZShcIm9yYW5nZVwiKTtcclxuICAgICAgICBleHBlY3QoZ2V0SXRlbUJhc2VkT25UaHJlc2hvbGQoWzEwLCAyMF0sIFtcImdyZWVuXCIsIFwib3JhbmdlXCIsIFwicmVkXCJdLCAxNSwgXCJibGFja1wiKSkudG9CZShcIm9yYW5nZVwiKTtcclxuICAgICAgICBleHBlY3QoZ2V0SXRlbUJhc2VkT25UaHJlc2hvbGQoWzEwLCAyMF0sIFtcImdyZWVuXCIsIFwib3JhbmdlXCIsIFwicmVkXCIsIFwiYmx1ZVwiXSwgMTUsIFwiYmxhY2tcIikpLnRvQmUoXCJvcmFuZ2VcIik7XHJcbiAgICAgICAgZXhwZWN0KGdldEl0ZW1CYXNlZE9uVGhyZXNob2xkKFsxMCwgMjBdLCBbXCJncmVlblwiLCBcIm9yYW5nZVwiLCBcInJlZFwiXSwgMjAsIFwiYmxhY2tcIikpLnRvQmUoXCJyZWRcIik7XHJcbiAgICAgICAgZXhwZWN0KGdldEl0ZW1CYXNlZE9uVGhyZXNob2xkKFsxMCwgMjBdLCBbXCJncmVlblwiLCBcIm9yYW5nZVwiLCBcInJlZFwiXSwgMjUsIFwiYmxhY2tcIikpLnRvQmUoXCJyZWRcIik7XHJcbiAgICAgICAgZXhwZWN0KGdldEl0ZW1CYXNlZE9uVGhyZXNob2xkKFsxMCwgMjBdLCBbXCJncmVlblwiLCBcIm9yYW5nZVwiLCBcInJlZFwiXSwgMjAsIFwiYmxhY2tcIikpLnRvQmUoXCJyZWRcIik7XHJcbiAgICAgICAgZXhwZWN0KGdldEl0ZW1CYXNlZE9uVGhyZXNob2xkKFsxMCwgMjBdLCBbXCJncmVlblwiLCBcIm9yYW5nZVwiXSwgMjUsIFwiYmxhY2tcIikpLnRvQmUoXCJibGFja1wiKTtcclxuICAgIH0pO1xyXG59KTtcclxuZGVzY3JpYmUoXCJNZXJ0aWMgTmFtZSBmcm9tIHByb21ldGhldXMgLyBpbmZsdXhkYiBBbGlhc1wiLCAoKSA9PiB7XHJcbiAgICBpdChcIlByb21ldGhldXMgRm9ybWF0XCIsICgpID0+IHtcclxuICAgICAgICBleHBlY3QoZ2V0TWV0cmljTmFtZUZyb21UYWdnZWRBbGlhcyhcImNvbnRhaW5lcl9jcHVfbG9hZF9hdmVyYWdlXzEwc1wiKSkudG9CZShcImNvbnRhaW5lcl9jcHVfbG9hZF9hdmVyYWdlXzEwc1wiKTtcclxuICAgICAgICBleHBlY3QoZ2V0TWV0cmljTmFtZUZyb21UYWdnZWRBbGlhcyhcImNvbnRhaW5lcl9jcHVfbG9hZF9hdmVyYWdlXzEwcyBcIikpLnRvQmUoXCJjb250YWluZXJfY3B1X2xvYWRfYXZlcmFnZV8xMHNcIik7XHJcbiAgICAgICAgZXhwZWN0KGdldE1ldHJpY05hbWVGcm9tVGFnZ2VkQWxpYXMoXCJjb250YWluZXJfY3B1X2xvYWRfYXZlcmFnZV8xMHMge31cIikpLnRvQmUoXCJjb250YWluZXJfY3B1X2xvYWRfYXZlcmFnZV8xMHNcIik7XHJcbiAgICAgICAgZXhwZWN0KGdldE1ldHJpY05hbWVGcm9tVGFnZ2VkQWxpYXMoXCIgY29udGFpbmVyX2NwdV9sb2FkX2F2ZXJhZ2VfMTBzIHt9XCIpKS50b0JlKFwiY29udGFpbmVyX2NwdV9sb2FkX2F2ZXJhZ2VfMTBzXCIpO1xyXG4gICAgICAgIGV4cGVjdChnZXRNZXRyaWNOYW1lRnJvbVRhZ2dlZEFsaWFzKGBjb250YWluZXJfY3B1X2xvYWRfYXZlcmFnZV8xMHN7YWdlbnRwb29sPVwiYWdlbnRwb29sMVwifWApKS50b0JlKFwiY29udGFpbmVyX2NwdV9sb2FkX2F2ZXJhZ2VfMTBzXCIpO1xyXG4gICAgICAgIGV4cGVjdChnZXRNZXRyaWNOYW1lRnJvbVRhZ2dlZEFsaWFzKGBjb250YWluZXJfY3B1X2xvYWRfYXZlcmFnZV8xMHMge2FnZW50cG9vbD1cImFnZW50cG9vbDFcIn1gKSkudG9CZShcImNvbnRhaW5lcl9jcHVfbG9hZF9hdmVyYWdlXzEwc1wiKTtcclxuICAgICAgICBleHBlY3QoZ2V0TWV0cmljTmFtZUZyb21UYWdnZWRBbGlhcyhgIGNvbnRhaW5lcl9jcHVfbG9hZF9hdmVyYWdlXzEwcyB7IGFnZW50cG9vbCA9IFwiYWdlbnRwb29sMVwiIH0gYCkpLnRvQmUoXCJjb250YWluZXJfY3B1X2xvYWRfYXZlcmFnZV8xMHNcIik7XHJcbiAgICAgICAgZXhwZWN0KGdldE1ldHJpY05hbWVGcm9tVGFnZ2VkQWxpYXMoYCBjb250YWluZXJfY3B1X2xvYWRfYXZlcmFnZV8xMHMgeyBpbWFnZSA9IFwiYWJjOmNiYTEyOmhlbGxvXCIgfSBgKSkudG9CZShcImNvbnRhaW5lcl9jcHVfbG9hZF9hdmVyYWdlXzEwc1wiKTtcclxuICAgICAgICBleHBlY3QoZ2V0TWV0cmljTmFtZUZyb21UYWdnZWRBbGlhcyhgY29udGFpbmVyX21lbW9yeV91c2FnZV9ieXRlc3tiZXRhX2t1YmVybmV0ZXNfaW9fYXJjaD1cImFtZDY0XCIsYmV0YV9rdWJlcm5ldGVzX2lvX2luc3RhbmNlX3R5cGU9XCJTdGFuZGFyZF9EMl92MlwifWApKS50b0JlKFwiY29udGFpbmVyX21lbW9yeV91c2FnZV9ieXRlc1wiKTtcclxuICAgIH0pO1xyXG4gICAgaXQoXCJJbmZsdXhEQiBGb3JtYXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChnZXRNZXRyaWNOYW1lRnJvbVRhZ2dlZEFsaWFzKFwiQ1BVLkNQVSBUSW1lXCIpKS50b0JlKFwiQ1BVLkNQVSBUSW1lXCIpO1xyXG4gICAgICAgIGV4cGVjdChnZXRNZXRyaWNOYW1lRnJvbVRhZ2dlZEFsaWFzKFwiQ1BVLkNQVSBUSW1lIFwiKSkudG9CZShcIkNQVS5DUFUgVEltZVwiKTtcclxuICAgICAgICBleHBlY3QoZ2V0TWV0cmljTmFtZUZyb21UYWdnZWRBbGlhcyhcIkNQVS5DUFUgVEltZSB7fSBcIikpLnRvQmUoXCJDUFUuQ1BVIFRJbWVcIik7XHJcbiAgICAgICAgZXhwZWN0KGdldE1ldHJpY05hbWVGcm9tVGFnZ2VkQWxpYXMoXCJDUFUuQ1BVIFRJbWUge2Vudmlyb25tZW50OiAyNzksIGluc3RhbmNlOiBfVG90YWx9XCIpKS50b0JlKFwiQ1BVLkNQVSBUSW1lXCIpO1xyXG4gICAgICAgIGV4cGVjdChnZXRNZXRyaWNOYW1lRnJvbVRhZ2dlZEFsaWFzKFwiIENQVS5DUFUgVEltZSB7IGVudmlyb25tZW50OiAyNzksIGluc3RhbmNlOiBfVG90YWx9XCIpKS50b0JlKFwiQ1BVLkNQVSBUSW1lXCIpO1xyXG4gICAgICAgIGV4cGVjdChnZXRNZXRyaWNOYW1lRnJvbVRhZ2dlZEFsaWFzKFwiIENQVS5DUFUgVEltZSB7IGVudmlyb25tZW50OiAyNzksIGVxdWF0aW9uOiBgX1RvdGE9bGB9XCIpKS50b0JlKFwiQ1BVLkNQVSBUSW1lXCIpO1xyXG4gICAgfSk7XHJcblxyXG59KTtcclxuZGVzY3JpYmUoXCJWYWx1ZSBuZWVkcyB0byBoaWRkZW5cIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJEZWZhdWx0IFZhbHVlc1wiLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KGRvZXNWYWx1ZU5lZWRzVG9IaWRlKDEwLCB1bmRlZmluZWQpKS50b0JlKGZhbHNlKTtcclxuICAgICAgICBleHBlY3QoZG9lc1ZhbHVlTmVlZHNUb0hpZGUoMCwgeyB2YWx1ZV9iZWxvdzogXCI1XCIgfSkpLnRvQmUodHJ1ZSk7XHJcbiAgICAgICAgZXhwZWN0KGRvZXNWYWx1ZU5lZWRzVG9IaWRlKC0yLCB7IHZhbHVlX2JlbG93OiBcIi0xXCIgfSkpLnRvQmUodHJ1ZSk7XHJcbiAgICAgICAgZXhwZWN0KGRvZXNWYWx1ZU5lZWRzVG9IaWRlKDIsIHsgdmFsdWVfYmVsb3c6IFwiMTBcIiB9KSkudG9CZSh0cnVlKTtcclxuICAgICAgICBleHBlY3QoZG9lc1ZhbHVlTmVlZHNUb0hpZGUoMTAsIHsgdmFsdWVfYmVsb3c6IFwiNVwiIH0pKS50b0JlKGZhbHNlKTtcclxuICAgICAgICBleHBlY3QoZG9lc1ZhbHVlTmVlZHNUb0hpZGUoMiwgeyB2YWx1ZV9iZWxvdzogXCItMVwiIH0pKS50b0JlKGZhbHNlKTtcclxuICAgICAgICBleHBlY3QoZG9lc1ZhbHVlTmVlZHNUb0hpZGUoMTUsIHsgdmFsdWVfYWJvdmU6IFwiMTBcIiB9KSkudG9CZSh0cnVlKTtcclxuICAgICAgICBleHBlY3QoZG9lc1ZhbHVlTmVlZHNUb0hpZGUoMTUsIHsgdmFsdWVfYWJvdmU6IFwiMFwiIH0pKS50b0JlKHRydWUpO1xyXG4gICAgICAgIGV4cGVjdChkb2VzVmFsdWVOZWVkc1RvSGlkZSgxMCwgeyB2YWx1ZV9hYm92ZTogXCIxNVwiIH0pKS50b0JlKGZhbHNlKTtcclxuICAgICAgICBleHBlY3QoZG9lc1ZhbHVlTmVlZHNUb0hpZGUoMCwgeyB2YWx1ZV9hYm92ZTogXCIxNVwiIH0pKS50b0JlKGZhbHNlKTtcclxuICAgICAgICBleHBlY3QoZG9lc1ZhbHVlTmVlZHNUb0hpZGUoMCwgeyB2YWx1ZV9iZWxvdzogXCI1XCIsIHZhbHVlX2Fib3ZlOiBcIi01XCIgfSkpLnRvQmUodHJ1ZSk7XHJcbiAgICAgICAgZXhwZWN0KGRvZXNWYWx1ZU5lZWRzVG9IaWRlKDEwLCB7IHZhbHVlX2JlbG93OiBcIjE1XCIsIHZhbHVlX2Fib3ZlOiBcIjMwXCIgfSkpLnRvQmUodHJ1ZSk7XHJcbiAgICAgICAgZXhwZWN0KGRvZXNWYWx1ZU5lZWRzVG9IaWRlKDEwLCB7IHZhbHVlX2JlbG93OiBcIjVcIiwgdmFsdWVfYWJvdmU6IFwiNVwiIH0pKS50b0JlKHRydWUpO1xyXG4gICAgICAgIGV4cGVjdChkb2VzVmFsdWVOZWVkc1RvSGlkZSgxMCwgeyB2YWx1ZV9iZWxvdzogXCIxNVwiLCB2YWx1ZV9hYm92ZTogXCI1XCIgfSkpLnRvQmUodHJ1ZSk7XHJcbiAgICAgICAgZXhwZWN0KGRvZXNWYWx1ZU5lZWRzVG9IaWRlKDEwLCB7IHZhbHVlX2JlbG93OiBcIjAxNVwiLCB2YWx1ZV9hYm92ZTogXCIwNVwiIH0pKS50b0JlKHRydWUpO1xyXG4gICAgICAgIGV4cGVjdChkb2VzVmFsdWVOZWVkc1RvSGlkZSgwLCB7IHZhbHVlX2JlbG93OiBcIjVcIiwgdmFsdWVfYWJvdmU6IFwiMlwiIH0pKS50b0JlKHRydWUpO1xyXG4gICAgICAgIGV4cGVjdChkb2VzVmFsdWVOZWVkc1RvSGlkZSgwLCB7IHZhbHVlX2JlbG93OiBcIjJcIiwgdmFsdWVfYWJvdmU6IFwiNVwiIH0pKS50b0JlKHRydWUpO1xyXG4gICAgICAgIGV4cGVjdChkb2VzVmFsdWVOZWVkc1RvSGlkZSgxMCwgeyB2YWx1ZV9iZWxvdzogXCIgMDE1IFwiLCB2YWx1ZV9hYm92ZTogXCIgMDUgXCIgfSkpLnRvQmUodHJ1ZSk7XHJcbiAgICAgICAgZXhwZWN0KGRvZXNWYWx1ZU5lZWRzVG9IaWRlKDEwLCB7IHZhbHVlX2JlbG93OiBcIiA1IFwiLCB2YWx1ZV9hYm92ZTogXCItNSBcIiB9KSkudG9CZSh0cnVlKTtcclxuICAgICAgICBleHBlY3QoZG9lc1ZhbHVlTmVlZHNUb0hpZGUoMTAsIHsgdmFsdWVfYmVsb3c6IFwiMTVcIiwgdmFsdWVfYWJvdmU6IFwiNSBcIiB9KSkudG9CZSh0cnVlKTtcclxuICAgICAgICBleHBlY3QoZG9lc1ZhbHVlTmVlZHNUb0hpZGUoMTAsIHsgdmFsdWVfYmVsb3c6IFwiNVwiLCB2YWx1ZV9hYm92ZTogXCIzMFwiIH0pKS50b0JlKGZhbHNlKTtcclxuICAgICAgICBleHBlY3QoZG9lc1ZhbHVlTmVlZHNUb0hpZGUoMTAsIHsgdmFsdWVfYmVsb3c6IFwiIDUgXCIsIHZhbHVlX2Fib3ZlOiBcIiAzMCBcIiB9KSkudG9CZShmYWxzZSk7XHJcbiAgICAgICAgZXhwZWN0KGRvZXNWYWx1ZU5lZWRzVG9IaWRlKDAsIHsgdmFsdWVfYmVsb3c6IFwiLTJcIiwgdmFsdWVfYWJvdmU6IFwiNVwiIH0pKS50b0JlKGZhbHNlKTtcclxuICAgIH0pO1xyXG59KTtcclxuIl19